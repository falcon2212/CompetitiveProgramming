{
	// Place your CompetitiveProgramming workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Template": {
		"scope": "cpp",
		"prefix": "zzpre",
		"body": [
			"#include<bits\/stdc++.h>\r\n#include <ext\/pb_ds\/assoc_container.hpp>\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\n\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC target(\"avx,avx2,fma\")\r\n#pragma GCC optimization (\"O3\")\r\n#pragma GCC optimization (\"unroll-loops\")\r\n\r\ntypedef tree<int,null_type,less<int>,rb_tree_tag, tree_order_statistics_node_update> indexed_set;\r\ntypedef vector<int> vi;\r\n#define ff first\r\n#define ss second\r\n#define pb push_back\r\n#define mp make_pair\r\n#define sz(v) (int)v.size()\r\n#define ll long long int\r\n#define ld long double\r\n#define pii pair<int, int>\r\n#define pll pair<ll, ll>\r\n#define all(v) v.begin(),v.end()\r\n#define rep(i, a, b) for(int i = a; i < b; i++)\r\n#define endl \"\\n\"\r\n#define CASE(t) cout<<\"Case #\"<<t<<\": \";\r\n\r\n\/\/ -------------------------------------------------------------------------------------------------------------------------------------------\r\n#define trarr(a,n) rep(i,0,n) cerr<<a[i]<<\" \\n\"[i==n-1];\r\n#define trmat(g,n,m) rep(i,0,n)rep(j,0,m) cerr<<g[i][j]<<\" \\n\"[i==m-1];\r\n#define tr(...) cerr<<__FUNCTION__<<' '<<__LINE__<<\" = \";trace(#__VA_ARGS__, __VA_ARGS__)\r\ntemplate<typename S, typename T> \r\nostream& operator<<(ostream& out,pair<S,T> const& p){out<<'('<<p.ff<<\", \"<<p.ss<<')';return out;}\r\ntemplate<typename S, typename T> \r\nostream& operator<<(ostream& out,map<S,T> const& p){for(auto i: p) out<<i<<\" \"; out<<endl; return out;}\r\ntemplate<typename S, typename T> \r\nostream& operator<<(ostream& out,unordered_map<S,T> const& p){for(auto i: p) out<<i<<\" \"; out<<endl; return out;}\r\ntemplate<typename T>\r\nostream& operator<<(ostream& out,vector<T> const& v){for(T i: v) out<<i<<\" \";out<<endl; return out;}\r\ntemplate<typename T>\r\nostream& operator<<(ostream& out,set<T> const& v){for(T i: v) out<<i<<\" \";out<<endl; return out;}\r\ntemplate<typename T>\r\nostream& operator<<(ostream& out,unordered_set<T> const& v){for(T i: v) out<<i<<\" \";out<<endl; return out;}\r\ntemplate<typename T>\r\nvoid trace(const char* name, T&& arg1){cout<<name<<\" : \"<<arg1<<endl;}\r\ntemplate<typename T, typename... Args>\r\nvoid trace(const char* names, T&& arg1, Args&&... args){\r\nconst char* comma = strchr(names + 1, ',');cout.write(names, comma-names)<<\" : \"<<arg1<<\" | \";trace(comma+1,args...);}\r\n\/\/ -------------------------------------------------------------------------------------------------------------------------------------------\r\n \r\nconst ld PI = acos(-1);\r\nconst ld EPS = 1e-9;\r\nconst int inf = 1e9+10;\r\nconst ll INF = 1e18+10;\r\nconst int P = 1e9+7;\r\nconst int N = 2e5+10;\r\n\r\nclass Solution{\r\npublic:\r\n    void solve(){\r\n    }\r\n};\r\nint main(){\r\n    int t = 1;\r\n    cin >> t;\r\n    for(int test = 0; test < t; test++){\r\n        Solution inst;\r\n        \/\/ CASE(test+1);\r\n        inst.solve();\r\n    }\r\n    return 0;\r\n}\r\n"
		],
		"description": "Template code, the above string is escaped at https://www.freeformatter.com/json-escape.html#ad-output"
	}
}